#!/bin/bash

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# 配置项
TEST_BRANCH="test"
MERGE_PATTERNS=(
    "Merge branch '${TEST_BRANCH}'"
    "Merge branch 'origin/${TEST_BRANCH}'"
    "Merge remote-tracking branch 'origin/${TEST_BRANCH}'"
)

# 函数：打印错误信息
print_error() {
    echo -e "${RED}错误：$1${NC}"
}

# 函数：打印信息
print_info() {
    echo -e "${GREEN}信息：$1${NC}"
}

# 函数：打印警告信息
print_warning() {
    echo -e "${YELLOW}警告：$1${NC}"
}

# 函数：获取当前分支名
get_current_branch() {
    local branch
    branch=$(git symbolic-ref --short HEAD 2>/dev/null)
    if [ $? -ne 0 ]; then
        print_error "无法获取当前分支，请确认当前目录位于Git仓库中"
        exit 1
    fi
    echo "$branch"
}

# 函数：检查合并记录
check_merge_history() {
    local source_branch="$1"
    local target_branch="$2"
    local regex_pattern
    regex_pattern=$(IFS=\|; echo "${MERGE_PATTERNS[*]}")
    local violation_found=false

    print_info "检查 $source_branch..$target_branch 之间的合并记录..."

    while IFS= read -r commit_msg; do
        if [[ -n "$commit_msg" && "$commit_msg" =~ $regex_pattern ]]; then
            print_error "发现违规的合并操作："
            print_error "提交信息：$commit_msg"
            violation_found=true
        fi
    done <<< "$(git log "$source_branch".."$target_branch" --pretty=format:"%s")"

    echo "$violation_found"
}

# 主程序开始
main() {
    # 获取当前分支
    current_branch=$(get_current_branch)
    print_info "当前分支：${current_branch}"

    # 如果当前分支是test分支，直接通过
    if [[ "$current_branch" == "$TEST_BRANCH" ]]; then
        print_info "当前是test分支，允许推送"
        exit 0
    fi

    # 获取最近的一次push记录作为比较起点
    local_ref=$(git rev-parse HEAD)
    base_ref=$(git rev-parse '@{u}' 2>/dev/null || git rev-parse --abbrev-ref HEAD)

    print_info "local_ref:$local_ref"
    print_info "base_ref:$base_ref"

    # 检查合并记录
    violation_found=$(check_merge_history "$base_ref" "$local_ref")

    # 根据检查结果决定是否允许推送
    if [ "$violation_found" = "true" ]; then
        print_error "禁止推送：发现test分支的合并记录"
        print_error "请创建新分支重新进行开发，或联系管理员处理"
        exit 1
    else
        print_info "检查通过，未发现违规的合并操作"
        exit 0
    fi
}

# 执行主程序
main
