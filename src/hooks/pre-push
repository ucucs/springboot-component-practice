#!/usr/bin/env bash

#该脚本是一个Git预推送（pre-push）钩子脚本，其主要功能是在用户尝试将本地分支推送到远程仓库之前，检查当前激活的Git分支是否包含了（即，其提交历史中是否包含提交）一个或多个禁止的分支。这样的检查有助于避免特定分支（比如测试分支）的代码被意外地合并或推送至错误的目的地，确保团队协作和版本控制的规范性。下面是脚本的详细说明：
#1. **版本信息与颜色配置**：定义了脚本的版本号为`1.0.0`，并设置了ANSI转义码来输出不同颜色的日志信息，以提高可读性。
#2. **常量定义**：
#    - `BRANCH_CHECK_ENABLE`=1 表示分支检查功能默认开启。
#    - `BRANCH_CHECK_NAMES`数组定义了禁止推送的分支列表，如`test`和`test_intl`，这些分支不允许被包含在任何即将推送的分支中。
#
#3. **日志函数**：定义了`log_info`、`log_warn`、`log_error`三个函数，用于在终端以不同颜色输出信息、警告和错误日志。
#4. **分支检查函数**：`check_branch_inclusion`函数接收一个分支名作为参数，通过`git branch --contains`命令检查当前分支是否包含这个禁止的分支。如果包含，则脚本会报错并终止推送操作。
#5. **主程序**：
#    - 首先，输出预推送脚本的版本信息。
#    - 如果分支检查功能被禁用（`BRANCH_CHECK_ENABLE`=0），则直接退出，不执行任何检查。
#    - 获取当前激活的Git分支名（`currBranch`）。如果无法获取（可能不在Git仓库目录中），则报错并退出。
#    - 打印当前分支名。
#    - 遍历所有禁止的分支，对每个分支调用`check_branch_inclusion`函数进行检查。
#    - 如果所有检查均通过，脚本会输出“预推送分支检查通过”信息，并正常退出，允许推送操作继续。
#
#综上所述，该脚本在Git工作流程中扮演着守门员的角色，确保开发人员遵循团队关于分支使用的约定，防止敏感或测试分支的代码被误推送到生产或共享的远程仓库中。

# 版本信息
VERSION="1.0.0"

# ANSI颜色代码
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# 常量定义区域：
# 分支检查标志，禁用(0),启用(1)
BRANCH_CHECK_ENABLE=1
# 禁止的分支列表
BRANCH_CHECK_NAMES=(
   'test'  # test国内分支
   'test_intl'  # test国际分支
)

# 输出带颜色的日志函数
log_info() { echo -e "${GREEN}[INFO]${NC} $*" ; }
log_warn() { echo -e "${YELLOW}[WARN]${NC} $*" >&2 ; }
log_error() { echo -e "${RED}[ERROR]${NC} $*" >&2 ; }

# 检查当前分支是否包含禁止的分支
check_branch_inclusion() {
    local forbidden_branch="$1"

    if [ "$currBranch" = "$forbidden_branch" ]; then
        log_info "当前分支与被检查分支相同，跳过检查。"
        return
    fi

    if git branch --contains "$forbidden_branch" | grep -q "^* "; then
        log_error "当前分支 ${currBranch} 包含禁止的分支 ${forbidden_branch}"
        exit 1
    fi
}

# 主程序
log_info "pre-push版本: ${VERSION}"
if [ "$BRANCH_CHECK_ENABLE" -eq 0 ]; then
    log_info "预推送分支检查已禁用，跳过。"
    exit 0
fi

currBranch=$(git symbolic-ref --short HEAD 2>/dev/null)
if [ $? -ne 0 ]; then
    log_error "无法获取当前分支，请确认当前目录位于Git仓库中。"
    exit 1
fi

log_info "当前分支名为: ${currBranch}"

for branch in "${BRANCH_CHECK_NAMES[@]}"; do
    check_branch_inclusion "$branch"
done

log_info "预推送分支检查通过。"
exit 0