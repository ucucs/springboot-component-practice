#!/bin/bash

# 定义需要匹配的合并模式
git_test_branch_name="test"
merge_patterns=(
  "Merge branch '$git_test_branch_name'"
  "Merge branch 'origin/$git_test_branch_name'"
  "Merge remote-tracking branch 'origin/$git_test_branch_name'"
)

# 构造正则表达式
regex_pattern=$(IFS=\|; echo "${merge_patterns[*]}")

# 获取当前Git分支名称
currBranch=$(git symbolic-ref --short HEAD 2>/dev/null)
# 检查是否成功获取到分支名
if [ $? -ne 0 ]; then
    echo "错误：无法获取当前分支，请确认当前目录位于Git仓库中。"
    exit 1  # 非Git仓库错误退出
fi

echo "信息：当前分支名为: ${currBranch}"

# 指定需要比较的源分支，这里应该替换为你实际需要比较的源分支名称
#source_branch=git show-branch -a | grep '\*' | grep -v `git rev-parse --abbrev-ref HEAD` | head -n1 | sed 's/.*\[\(.*\)\].*/\1/' | sed 's/[\^~].*//'
# 获取当前分支的源分支
source_branch=$(git show-branch -a 2>/dev/null | \
    grep '\*' | \
    grep -v "$(git rev-parse --abbrev-ref HEAD)" | \
    head -n1 | \
    sed 's/.*\[\(.*\)\].*/\1/' | \
    sed 's/[\^~].*//')

echo "源分支：$source_branch"

# 如果无法获取源分支，则给出错误提示
if [ -z "$source_branch" ]; then
    echo "错误：无法确定源分支"
    exit 1
fi

echo "信息：源分支为: ${source_branch}"

target_branch="${currBranch}"

# 初始化一个标志，用于跟踪是否发现违规的提交信息
violation_found=false

# 遍历提交信息，检查是否包含不应该出现的合并模式
while IFS= read -r commit_msg; do
    echo "提交信息: $commit_msg"
    if [[ $commit_msg =~ $regex_pattern ]]; then
        echo "错误：发现违规的合并操作，提交信息包含：$commit_msg"
        violation_found=true
    fi
done <<< "$(git log "$source_branch".."$target_branch" --pretty=format:"%s")"

# 根据检查结果决定脚本的退出状态
if [ "$violation_found" = true ]; then
    exit 1  # 发现违规，错误退出
else
    echo "检查通过，未发现违规的合并操作。"
    exit 0  # 未发现问题，正常退出
fi